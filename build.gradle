buildscript {
	ext.kotlin_version = '1.2.30'
 
    repositories {
        mavenCentral()
    }
    dependencies {
    	classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE")
	    classpath("org.hidetake:gradle-ssh-plugin:2.2.0")
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'org.hidetake.ssh'

bootJar {
    baseName = 'skylife-service'
    version =  '0.1.0'
}

bootWar {
    baseName = 'skylife-service'    
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    compile("com.google.zxing:core:3.3.3")
    compile("com.google.zxing:javase:3.3.3")
	compile("com.google.actions:actions-on-google:1.8.0") {
        exclude module : 'slf4j-log4j12'
    }
    testCompile("junit:junit")

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation('org.apache.httpcomponents:httpclient:4.5')

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.3'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    compile "org.projectlombok:lombok:1.16.20"
}

remotes {
  webServer {
    host = '172.30.1.23'
    port = 22
    user = 'o2oadmin'
    identity = file('actions_service_key')
    knownHosts = allowAnyHosts
  }
}

task('deployDev') { //release 적용은 Gradle의 Task/application/deployDev 으로 함
	dependsOn 'bootWar'
	group = 'application'

	doLast {
		String path = bootWar.destinationDirectory.getAsFile().get();
		String filename = bootWar.archiveFileName.get();
		ssh.run {
			session(remotes.webServer) {
				put from: "${path}/${filename}", into: './'
				execute ("sudo chown tomcat ${filename}")
                execute ("sudo mv ${filename} /opt/dev/tomcat_d4/webapps/devsvr4.war") // ex) /opt/dev/tomcat_d4/webapps/devsvr4.war  각자할당 tomcat위치에 맞게 적어주면 됨
			}
		}
	}
}
